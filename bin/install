#!/usr/bin/env bash

set -e
set -o pipefail

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version  }
TMPDIR=${TMPDIR:-/tmp}
[ -n "$ASDF_INSTALL_VERSION" ] || (>&2 echo 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (>&2 echo 'Missing ASDF_INSTALL_PATH' && exit 1)

get_arch() {
  uname | tr '[:upper:]' '[:lower:]'
}

## Kubectl
install_kubectl() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local bin_install_path="$install_path/bin"
  local download_url="$(kube_get_download_url $version)"

  mkdir -p "${bin_install_path}"

  local bin_path="${bin_install_path}/kubectl"
  echo "Downloading kubectl from ${download_url}"
  curl -s "$download_url" -o "$bin_path"
  chmod +x $bin_path
}



kube_get_download_url() {
  local version="$1"
  local platform="$(get_arch)"
  echo "https://storage.googleapis.com/kubernetes-release/release/v${version}/bin/${platform}/amd64/kubectl"
}


## HELM

install_helm() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local platform="$(uname | tr '[:upper:]' '[:lower:]')-amd64"
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/helm"
  local download_url=$(helm_get_download_url $version $platform)

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d -t helm_XXXXXX)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local download_path="$tmp_download_dir/$(helm_get_filename $version $platform)"

  echo "Downloading helm from ${download_url} to ${download_path}"
  curl -Lo $download_path $download_url

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Cleaning previous binaries"
  rm -f $binary_path 2>/dev/null || true

  echo "Copying binary"
  tar -zxf ${download_path} --directory $tmp_download_dir
  cp ${tmp_download_dir}/${platform}/helm ${bin_install_path}
  chmod +x ${binary_path}
}

helm_get_filename() {
  local version="$1"
  local platform="$2"

  echo "helm-v${version}-${platform}.tar.gz"
}

helm_get_download_url() {
  local version="$1"
  local platform="$2"
  local filename="$(get_filename $version $platform)"

  echo "https://storage.googleapis.com/kubernetes-helm/${filename}"
}

## Minikube
install_minikube() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/minikube"
  local download_url=$(minikube_get_download_url $version)

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d -t minikube_XXXXXX)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local download_path="$tmp_download_dir/$(minikube_get_filename)"

  echo "Downloading minikube from ${download_url}"
  curl -Lo $download_path $download_url

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Cleaning previous binaries"
  rm -f $binary_path 2>/dev/null || true

  echo "Copying binary"
  cp $download_path $binary_path
  chmod +x $binary_path
}

minikube_get_filename() {
  local platform="$(get_arch)"

  echo "minikube-${platform}-amd64"
}

minikube_get_download_url() {
  local version=$1
  local filename="$(get_filename)"

  echo "https://github.com/kubernetes/minikube/releases/download/v${version}/${filename}"
}

install_kubectl $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
install_helm $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
install_minikube $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH